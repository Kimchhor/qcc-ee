//===-- QISASubtarget.h - Define Subtarget for QISA -------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the QISA specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_QISA_QISASUBTARGET_H
#define LLVM_LIB_TARGET_QISA_QISASUBTARGET_H

#include "QISAFrameLowering.h"
#include "QISAISelLowering.h"
#include "QISAInstrInfo.h"
#include "QISARegisterInfo.h"
#include "llvm/CodeGen/MachineScheduler.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "QISAGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class QISASubtarget : public QISAGenSubtargetInfo {
  Triple TargetTriple;
  virtual void anchor();

  QISAInstrInfo InstrInfo;
  QISATargetLowering TLInfo;
  // SelectionDAGTargetInfo TSInfo;
  QISAFrameLowering FrameLowering;

public:
  QISASubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                const TargetMachine &TM);

  // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const QISAInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const QISARegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const QISATargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  bool enableMachineScheduler() const override { return true; }

  void overrideSchedPolicy(MachineSchedPolicy &Policy,
                           unsigned NumRegionInstrs) const override {
      
    Policy.OnlyBottomUp = true;
  }

#if 0
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
#endif
};

} // end namespace llvm

#endif
